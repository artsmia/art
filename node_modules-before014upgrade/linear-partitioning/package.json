{
  "name": "linear-partitioning",
  "version": "0.3.1",
  "description": "Given an array of numbers, partition them into a number of buckets, preserving order, where the ranges of each bucket are as close as possible.",
  "main": "linear-partitioning.js",
  "dependencies": {},
  "devDependencies": {
    "repeat-function": "~0.2.1",
    "mocha": "~1.13.0",
    "bench": "~0.3.5"
  },
  "scripts": {
    "test": "mocha --ui bdd --reporter spec ./test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/the-swerve/linear-partitioning.git"
  },
  "keywords": [
    "linear",
    "partition",
    "algorithm",
    "problem",
    "buckets"
  ],
  "author": {
    "name": "jay r bolton",
    "email": "jayrbolton@gmail.com",
    "url": "http://jayrbolton.com/"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/the-swerve/linear-partitioning/issues"
  },
  "readme": "\n# The Partition Problem\n\nSee http://www8.cs.umu.se/kurser/TDBAfl/VT06/algorithms/BOOK/BOOK2/NODE45.HTM\n\nInput: given an array of S non-negative numbers and an integer k (the number of partitions we want)\n\nOutput: Partition S into k ranges, so as to minimize the maximum sum over all the ranges. \n\n```javascript\nvar partition = require('linear-partitioning');\n\npartition([1,2,3,4,5,6,7,8,9], 3);\n> [[1,2,3,4,5], [6,7], [8,9]]\n```\n",
  "readmeFilename": "readme.md",
  "_id": "linear-partitioning@0.3.1",
  "dist": {
    "shasum": "44ba7f54b41a95689fa7cb75fe0dfc04ad247e0c",
    "tarball": "http://registry.npmjs.org/linear-partitioning/-/linear-partitioning-0.3.1.tgz"
  },
  "_from": "linear-partitioning@>=0.3.1 <0.4.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "the_swerve",
    "email": "jayrbolton@gmail.com"
  },
  "maintainers": [
    {
      "name": "the_swerve",
      "email": "jayrbolton@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "44ba7f54b41a95689fa7cb75fe0dfc04ad247e0c",
  "_resolved": "https://registry.npmjs.org/linear-partitioning/-/linear-partitioning-0.3.1.tgz"
}
